##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.17.1] date: [Wed Nov 09 07:55:04 EET 2022] 
##########################################################################################################################

# application sources: uart_hal_echo
# APP_UART_HAL_ECHO_C_SOURCES = \
# Application/uart_hal_echo/Src/main.c \
# Application/uart_hal_echo/Src/gpio.c \
# Application/uart_hal_echo/Src/stm32f1xx_it.c \
# Application/uart_hal_echo/Src/syscalls.c \
# Application/uart_hal_echo/Src/sysmem.c \
# Application/uart_hal_echo/Src/system_stm32f1xx.c \
# Application/uart_hal_echo/Src/usart.c \
# 
# application sources: uart_hal_tx
# APP_UART_HAL_TX_C_SOURCES = \
# Application/uart_hal_tx/Src/main.c \
# Application/uart_hal_tx/Src/gpio.c \
# Application/uart_hal_tx/Src/stm32f1xx_it.c \
# Application/uart_hal_tx/Src/syscalls.c \
# Application/uart_hal_tx/Src/sysmem.c \
# Application/uart_hal_tx/Src/system_stm32f1xx.c \
# Application/uart_hal_tx/Src/usart.c \

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# 
# targets:
# 	UART_HAL_TX 		: build example code for UART asynchronouse transmission using ST HAL libraries
# 	UART_LL_TX			: build example code for UART asynchronouse transmission using ST LL libraries
# 	UART_LL_DMA_TX		: build example code for UART/DMA asynchronouse transmission using ST LL libraries
# 
# 	UART_HAL_ECHO 		: build example code for UART asynchronouse transmission/reception using ST HAL libraries
# 	UART_LL_ECHO		: build example code for UART asynchronouse transmission/reception using ST LL libraries
# 	UART_LL_DMA_ECHO	: build example code for UART/DMA asynchronouse transmission/reception using ST LL libraries
# 
# build:
#	Debug		: build for debug (optmization flags -Og)
#	Release		: build release (optimization flags -O2)
#	RelMinSize	: build for relase with minimum size (optimization flags -Os)
# 	
# ------------------------------------------------

######################################
# building variables
######################################

# build type
ifeq ($(strip $(build)),)
build = Debug
endif

$(info Build type: $(build))


#######################################
# paths
#######################################
# Build path
ROOT_BUILD_DIR = build

######################################
# Applications
######################################


# default action: build all
all: UART_HAL_ECHO UART_HAL_TX UART_LL_ECHO UART_LL_TX UART_LL_DMA_ECHO UART_LL_DMA_TX


UART_HAL_ECHO:
	$(MAKE) -C Application/uart_hal_echo build=$(build)

UART_HAL_TX:
	$(MAKE) -C Application/uart_hal_tx build=$(build)

UART_LL_ECHO:
	$(MAKE) -C Application/uart_ll_echo build=$(build)

UART_LL_TX:
	$(MAKE) -C Application/uart_ll_tx build=$(build)

UART_LL_DMA_ECHO:
	$(MAKE) -C Application/uart_ll_dma_echo build=$(build)

UART_LL_DMA_TX:
	$(MAKE) -C Application/uart_ll_dma_tx build=$(build)

#######################################
# clean up
#######################################
clean:
	-rm -fR $(ROOT_BUILD_DIR)/

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
